Figure 8.10 is a simple matrix-multiplication program.


1. Translate the program into three-address statements of the type we have been using in this section. Assume the matrix entries are numbers that require 8 bytes, and that matrices are stored in row-major order.

1)  i = 0
2)  if i >= n goto ??  
3)  j = 0
4)  if i >= n goto(11)
5)  t1 = n * i
6)  t2 = t1 + j
7)  t3 = t2 * 8
8)  c[t3] = 0.0
9)  j = j + 1
10) goto(4)
11) i = i + 1
12) goto(2)
13) i = 1
14) if i >= n goto(40)
15) j = 0
16) if j >= n goto(38)
17) k = 0
18) if k >= n goto(36)
19) t4 = i * n
20) t5 = t4 + j
21) t6 = t5 * 8
22) t7 = c[t6]
23) t8 = n * i
24) t9 = t8 + k
25) t10 = t9 * 8
26) t11 = a[t10]
27) t12 = n * k
28) t13 = t12 + j
29) t14 = t13 * 8
30) t15 = b[t14]
31) t16 = t11 * t15
32) t17 = t7 + t16
33) c[t6] = t17
34) k = k + 1
35) goto(18)

36) j = j + 1
37) goto(16)

38) i = i + 1
39) goto(14)

2. Construct the flow graph for your code from (a).

B1:
1)  i = 0

B2:
2)  if i >= n goto(13)

B3:
3)  j = 0

B4:
4)  if i >= n goto(11)

B5:
5)  t1 = n * i
6)  t2 = t1 + j
7)  t3 = t2 * 8
8)  c[t3] = 0.0
9)  j = j + 1
10) goto(4)

B6:
11) i = i + 1
12) goto(2)

B7:
13) i = 1

B8:
14) if i >= n goto(40)

B9:
15) j = 0

B10:
16) if j >= n goto(38)

B11:
17) k = 0

B12:
18) if k >= n goto(36)

B13:
19) t4 = i * n
20) t5 = t4 + j
21) t6 = t5 * 8
22) t7 = c[t6]
23) t8 = n * i
24) t9 = t8 + k
25) t10 = t9 * 8
26) t11 = a[t10]
27) t12 = n * k
28) t13 = t12 + j
29) t14 = t13 * 8
30) t15 = b[t14]
31) t16 = t11 * t15
32) t17 = t7 + t16
33) c[t6] = t17
34) k = k + 1
35) goto(18)

B14:
36) j = j + 1
37) goto(16)

B15:
38) i = i + 1
39) goto(14)
